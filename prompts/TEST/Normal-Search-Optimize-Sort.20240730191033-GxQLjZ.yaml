type: function
parameters:
  - id: GVDfel1l4BehbFSNYPuJT
    type: string
    key: question
  - id: zjA4wJdmK9dDsRIe90Fh6
    key: search
    type: source
    source:
      variableFrom: tool
      agent:
        projectId: "468966286659944448"
        id: 20240730181941-uh10LN
        from: assistant
        parameters:
          question: "{{ question }}"
prompts:
  sqwbmXLUMvuDvjiY7Hwxa:
    index: 0
    data:
      type: message
      data:
        id: sqwbmXLUMvuDvjiY7Hwxa
        role: user
        content: "{{ question }}"
outputVariables:
  - id: jQuR5yIutLBv99hRUCRoM
    name: $text
  - id: LvnG8SZocXSmg5ME_eL2E
    name: organic_results
    type: array
    element:
      id: uEXG3mtuFC_ax7-4HagvX
      name: element
      type: object
      properties:
        - id: gscJT-yjzJQ3NTeoS4rSr
          type: string
          name: title
        - id: G0kEz-UZ5uZqLkETfHWm5
          type: string
          name: _content
        - id: FGuhVsejyEIL9lF3xY8I8
          type: string
          name: id
        - id: bcLQefkIQI2ONGwXw1gFx
          type: string
          name: score
id: 20240730191033-GxQLjZ
createdAt: 2024-07-30T01:30:37.163Z
updatedAt: 2024-07-30T01:30:37.163Z
createdBy: z2qaBKnrTUAobCcqGMbqAMFW5WHpYzL3Kub2D
updatedBy: z2qaBKnrTUAobCcqGMbqAMFW5WHpYzL3Kub2D
name: Normal-Search-Optimize-Sort
code: >
  const getUserHeader = () => {
    const user = context.get('user');
    return {
      'x-user-did': user?.did,
      'x-user-role': user?.role,
      'x-user-provider': user?.provider,
      'x-user-fullname': user?.fullName && encodeURIComponent(user?.fullName),
      'x-user-wallet-os': user?.walletOS,
    };
  };



  const list = (search?.organic_results || []).map(async (i) => {
    const result = await call({
      name: 'z2qaBP9SahqU2L2YA3ip7NecwKACMByTFuiJ2',
      method: 'POST',
      path: '/api/ai/call'
      data: {
        projectId: '468966286659944448',
        ref: 'main',
        assistantId: '20240730184334-jo2uSw',
        inputs: {
          question,
          content: i.content
        },
        sessionId: 'call',
      },
      headers: getUserHeader()
    });

    return {
      ...i,
      score: result.data.score
    }
  })


  const result = (await Promise.all(list)).flat().sort((a, b) => b.score -
  a.score);

  console.log('搜索数据', result.length)

  console.log('去重数据',uniqBy(result, 'id').length);



  return {
    text: 'hello, AIGNE!',
    organic_results: result
  }
